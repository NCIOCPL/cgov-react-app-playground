name: CI for Push Events
on: [ push ]
jobs:      
  build:
    name: Build, Test and Upload Artifacts
    runs-on: ubuntu-latest    
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
          echo "-----"
          echo "$GITHUB_REF"
          echo "-----"
          echo "$GITHUB_SHA"
      ## Setup variables for build info
      - name: Set Variables
        id: set_vars
        run: |
          ## PUSH
          if [ "${{ github.event_name }}" == "push" ]; then
            BUILD_NAME=$(sed -E 's/refs\/(heads|tags)\///; s/\//_/g;' <<< $GITHUB_REF)
            BRANCH_NAME=$(sed -E 's/refs\/(heads|tags)\///;' <<< $GITHUB_REF)
            COMMIT_HASH=$(echo "${GITHUB_SHA}")
            ## For step checks and artifact deployment path.
            export REPO_FULL=${{ github.repository }}
            export REPO_RE='([^/]+)/(.*)'
            [[ "$REPO_FULL" =~ $REPO_RE ]]
            REPO_OWNER=$(echo "${BASH_REMATCH[1]}")
            REPO_NAME=$(echo "${BASH_REMATCH[2]}")
          ## PULL_REQUEST
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            BUILD_NAME=$(sed -E 's/refs\/(heads|tags)\///; s/\//_/g;' <<< $GITHUB_REF)
            BRANCH_NAME=$(sed -E 's/refs\/(heads|tags)\///;' <<< $GITHUB_REF)
            COMMIT_HASH=$(echo "${GITHUB_SHA}")
            ## For step checks and artifact deployment path.
            export REPO_FULL=${{ github.repository }}
            export REPO_RE='([^/]+)/(.*)'
            [[ "$REPO_FULL" =~ $REPO_RE ]]
            REPO_OWNER=$(echo "${BASH_REMATCH[1]}")
            REPO_NAME=$(echo "${BASH_REMATCH[2]}")
          else
            ## ERROR
            exit 1
          fi
          echo ::set-output name=build_name::${BUILD_NAME}
          echo ::set-output name=branch_name::${BRANCH_NAME}
          echo ::set-output name=commit_hash::${COMMIT_HASH}
          echo ::set-output name=repo_owner::${REPO_OWNER}
          echo ::set-output name=repo_name::${REPO_NAME}
      ## This clones and checks out.
      - name: Checkout branch
        uses: actions/checkout@v1
      ## This installs the correct node version
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      ## Restore cache
      - name: Restore npm cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: cache-${{ hashFiles('package-lock.json') }}
      ## Install using CI
      - name: Install Dependencies
        run: npm ci
        env:
          CI: true
      ## Build the app in prep for publishing
      - name: Build App
        run: npm run build
        env:
          CI: true
      ## Runs jest unit and cypress e2e testing and merges coverage reports
      - name: Run Tests 
        run: npm test
        env:
          CI: true
      ## Generate build-info.json to house information
      ## about this specific build. Used for product test
      ## deployment
      - name: Create Build Information
        env:
          BUILD_INFO: ${{ toJson(steps.set_vars.outputs) }}
        run: |
          echo $BUILD_INFO
          echo $BUILD_INFO > ./build/build-info.json
      ## Upload the test results artifact
      - name: Archive production artifacts
        uses: actions/upload-artifact@v1
        with:
          name: test-results
          path: coverage          
      ## Upload the test results artifact
      - name: Archive production artifacts
        uses: actions/upload-artifact@v1
        with:
          name: build-artifact
          path: build
  deploy-test:
    name: Deploy built artifacts to test server
    ## Only do this if the repo is NCIOCPL
    #if: startsWith(github.repository, 'NCIOCPL')
    if: github.event_name == 'BLAH'
    ## This job depends on build completing
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download built app
        uses: actions/download-artifact@master
        with:
          name: build-artifact
      ## Setup vars from Build Info from build job
      - name: Setup Job env
        run: |
          ## Set Vars
          BUILD_NAME=$(jq -r '.build_name' < ./build-artifact/build-info.json)
          BRANCH_NAME=$(jq -r '.branch_name' < ./build-artifact/build-info.json)
          COMMIT_HASH=$(jq -r '.commit_hash' < ./build-artifact/build-info.json)
          REPO_OWNER=$(jq -r '.repo_owner' < ./build-artifact/build-info.json)
          REPO_NAME=$(jq -r '.repo_name' < ./build-artifact/build-info.json)

          ## Set Action Env
          echo ::set-env name=BUILD_NAME::$(echo $BUILD_NAME)
          echo ::set-env name=BRANCH_NAME::$(echo $BRANCH_NAME)
          echo ::set-env name=COMMIT_HASH::$(echo $COMMIT_HASH)
          echo ::set-env name=REPO_OWNER::$(echo $REPO_OWNER)
          echo ::set-env name=REPO_NAME::$(echo $REPO_NAME)
      ## We need to create the zip for netstorage          
      - name: Zip Build Artifact
        run: |
          pushd build-artifact
          zip -r ../${BUILD_NAME}.zip *
          popd

